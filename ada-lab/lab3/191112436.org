#+title: ADA Lab Assignment 3
#+subtitle: Seshal Jain, Scholar Number 191112436, CSE 3
#+options: h:2 num:nil toc:nil author:nil
#+date: [2021-01-27 Wed]
#+LATEX_HEADER: \usepackage[margin=0.7in]{geometry}
#+EXPORT_FILE_NAME: 191112436

Write programs for implementing the following searching techniques and analyze the time complexity:
a. Linear search
b. Binary search
c. Fibonacci search

* Linear Search
#+BEGIN_SRC cpp :tangle l3p1.cpp
#include <bits/stdc++.h>
using namespace std;

int search(int arr[], int n, int x)
{
    int i;
    for (i = 0; i < n; i++)
        if (arr[i] == x)
            return i;
    return -1;
}

int main()
{
    cout << "Enter size: ";
    int n;
    cin >> n;
    int arr[n];

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Enter key: ";
    int x;
    cin >> x;

    int index = search(arr, n, x);
    if (index == -1)
        cout << "Element is not present in the array";
    else
        cout << "Element found at position " << index;

    return 0;
}
#+END_SRC
** Output
#+begin_example
Enter size: 100
8 12 28 30 40 45 50 55 58 64 64 79 92 102 106 117 118 135 138 154 165 167 169 175 183 188 205 215 242 310 312 330 334 335 361 363 372 373 396 407 422 427 430 437 443 482 486 493 499 508 515 524 540 555 567 612 621 624 629 633 643 647 666 668 674 685 689 692 699 702 743 746 757 761 766 786 791 800 802 804 834 843 843 847 851 853 854 861 878 892 902 917 942 960 966 977 978 979 995 997
Enter key: 55
Key 55 found at index 7
#+end_example

The time complexity of Linear Search algorithm is $O(n)$ and space complexity is $O(1)$ The array provided to the =search= function need not be pre-sorted.

Best case complexity is seen when search key is at 1st index. In this case time complexity is $O(1)$
Worst case complexity is seen when search key is at last index. This this case time complexity is $O(n)$

* Binary Search
Implementation of Recursive Binary Search and Linear Search
#+BEGIN_SRC cpp :tangle l3p2.cpp
#include <bits/stdc++.h>
using namespace std;

int binSearch(int arr[], int low, int high, int key) {
    if (high < low) return -1;

    int mid = low + (high - low) / 2;
    if (arr[mid] == key) {
        return mid;
    } else if (arr[mid] > key) {
        return binSearch(arr, low, mid - 1, key);
    } else {
        return binSearch(arr, mid + 1, high, key);
    }
}

int main() {
    int n;
    cout << "Enter size: ";
    cin >> n;

    int arr[n];

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int key;
    cout << "Enter key: ";
    cin >> key;

    cout << "Key " << key << " found at index " << binSearch(arr, 0, n - 1, key) << "\n";
    return 0;
}
#+END_SRC
** Output
#+begin_example
Enter size: 100
8 12 28 30 40 45 50 55 58 64 64 79 92 102 106 117 118 135 138 154 165 167 169 175 183 188 205 215 242 310 312 330 334 335 361 363 372 373 396 407 422 427 430 437 443 482 486 493 499 508 515 524 540 555 567 612 621 624 629 633 643 647 666 668 674 685 689 692 699 702 743 746 757 761 766 786 791 800 802 804 834 843 843 847 851 853 854 861 878 892 902 917 942 960 966 977 978 979 995 997
Enter key: 106
Key 106 found at index 15
#+end_example

The time complexity of Binary Search algorithm is $O(log(n))$ and space complexity is $O(log(n))$ The array provided to the =binSearch= function must be pre-sorted.

Best case complexity is seen when search key is at midpoint index. In this case time complexity is $O(1)$
Worst case complexity is seen when search key is at either extreme index. In this case time complexity is $O(n)$
* Fibonacci Search
#+begin_src cpp :tangle l3p3.cpp
#include <bits/stdc++.h>
using namespace std;

int fSearch(int arr[], int x, int n);

int main() {
  int n;
  cout << "Enter size: ";
  cin >> n;

  int arr[n];

  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  int key;
  cout << "Enter key: ";
  cin >> key;

  cout << "Key " << key << " found at index " << fSearch(arr, key, n) << "\n";
  return 0;
}

int fSearch(int arr[], int x, int n) {
  int fibMMm2 = 0;
  int fibMMm1 = 1;
  int fibM = fibMMm2 + fibMMm1;

  while (fibM < n) {
    fibMMm2 = fibMMm1;
    fibMMm1 = fibM;
    fibM = fibMMm2 + fibMMm1;
  }

  int offset = -1;

  while (fibM > 1) {
    int i = min(offset + fibMMm2, n - 1);

    if (arr[i] < x) {
      fibM = fibMMm1;
      fibMMm1 = fibMMm2;
      fibMMm2 = fibM - fibMMm1;
      offset = i;
    } else if (arr[i] > x) {
      fibM = fibMMm2;
      fibMMm1 = fibMMm1 - fibMMm2;
      fibMMm2 = fibM - fibMMm1;
    }

    else
      return i;
  }

  if (fibMMm1 && arr[offset + 1] == x)
    return offset + 1;

  return -1;
}
#+end_src

** Output
#+begin_example
Enter size: 100
8 12 28 30 40 45 50 55 58 64 64 79 92 102 106 117 118 135 138 154 165 167 169 175 183 188 205 215 242 310 312 330 334 335 361 363 372 373 396 407 422 427 430 437 443 482 486 493 499 508 515 524 540 555 567 612 621 624 629 633 643 647 666 668 674 685 689 692 699 702 743 746 757 761 766 786 791 800 802 804 834 843 843 847 851 853 854 861 878 892 902 917 942 960 966 977 978 979 995 997
Enter key: 106
Key 106 found at index 14
#+end_example

The Fibonacci function is defined as $F(n) = F(n - 1) + F(n - 2)$

This generates a series =0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144...=

Fibonacci search is somewhat like Binary search, in that it eliminates parts of a *sorted* array to perform a search.

The worst case happens when we always traverse the $\frac{1}{3}$ part of the function, and the function comes out to be

$\frac{1}{\sqrt 5}\left\{\frac{1 + \sqrt 5}{2}\right\}^n$

Thus for $n \approx c \times 1.62^n$, we make $O(n)$ comparisions, which is $O(\log n)$.
