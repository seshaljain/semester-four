#+TITLE: Analysis and Design of Algorithms
#+SUBTITLE: Lab 6
#+AUTHOR: Seshal Jain
#+OPTIONS: num:nil toc:nil
#+DATE: March 10, 2021
#+LATEX_CLASS: assignment
#+EXPORT_FILE_NAME: 191112436

* Program 1
Write program (in any language) to solve the following problem:

Consider two integer arrays =val[0..n-1]= and =wt[0..n-1]= which represent values and weights associated with n items respectively. \\
Also given an integer =W= which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item or don't pick it.
- val[] = {60, 100, 120}
- wt[] = {10, 20, 30}
- W = 50

** Code
#+begin_src cpp :tangle l6p1.cpp
#include <bits/stdc++.h>
using namespace std;

void ks(int val[], int wt[], int n, int W) {
  int w = 0, K[n + 1][W + 1];

  for (int i = 0; i <= n; i++) {
    for (w = 0; w <= W; w++) {
      if (i == 0 || w == 0) {
        K[i][w] = 0;
      } else if (wt[i - 1] <= w) {
        K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
      } else {
        K[i][w] = K[i - 1][w];
      }
    }
  }

  int res = K[n][W];
  cout << "Maximum possible value is: " << res << "\n";
  cout << "From weights: ";

  for (int i = n; i > 0 && res > 0; i--) {
    if (res != K[i - 1][w]) {
      cout << wt[i - 1] << " ";
      res -= val[i - 1];
      w -= wt[i - 1];
    }
  }
}

int main() {
  int val[] = {60, 100, 120};
  int wt[] = {10, 20, 30};
  int n = sizeof(val) / sizeof(val[0]);
  int W = 50;

  cout << "Values: ";
  for (auto it : val) {
    cout << it << " ";
  }
  cout << "\n";

  cout << "Weights: ";
  for (auto it : wt) {
    cout << it << " ";
  }
  cout << "\n";

  ks(val, wt, n, W);
  cout << "\n";
  return 0;
}
#+end_src

#+RESULTS:
| Values:  |       60 |   100 | 120 |     |
| Weights: |       10 |    20 |  30 |     |
| Maximum  | possible | value | is: | 220 |
| From     | weights: |    30 |  20 |     |

** Output
#+begin_example
$ ./l6p1
Values: 60 100 120
Weights: 10 20 30
Maximum possible value is: 220
From weights: 30 20
#+end_example
