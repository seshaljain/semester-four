#+TITLE: Analysis and Design of Algorithms
#+SUBTITLE: Lab 5
#+AUTHOR: Seshal Jain
#+OPTIONS: num:nil toc:nil
#+DATE: February 24, 2021
#+LATEX_CLASS: assignment
#+EXPORT_FILE_NAME: 191112436

* Graph
#+begin_src dot :file graph.png
graph G {
    graph [layout=circo]

    0 -- 1 [label=4]
    0 -- 2 [label=3]
    1 -- 3 [label=2]
    1 -- 2 [label=1]
    2 -- 3 [label=4]
    3 -- 4 [label=2]
}
#+end_src

#+RESULTS:
[[file:graph.png]]

* Prim's Algorithm
#+begin_src cpp :tangle l5p1.cpp
#include <bits/stdc++.h>
using namespace std;

#define V 5

class prim {
public:
  int graph[V][V];

  int parent[V], key[V];
  bool mstSet[V];

  prim() {
    for (int i = 0; i < V; i++) {
      for (int j = 0; j < V; j++) {
        graph[i][j] = 0;
      }
    }

    for (int i = 0; i < V; i++) {
      key[i] = INT_MAX;
      mstSet[i] = false;
    }
  }

  void add_edge(int i, int j, int wt) {
    graph[i][j] = wt;
    graph[j][i] = wt;
  }

  int minKey(int key[], bool mstSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
      if (!mstSet[v] && key[v] < min)
        min = key[v], min_index = v;
    }

    return min_index;
  }

  void findMST() {
    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
      int u = minKey(key, mstSet);

      mstSet[u] = true;

      for (int v = 0; v < V; v++) {
        if ((graph[u][v] && mstSet[v] == false) && graph[u][v] < key[v]) {
          parent[v] = u;
          key[v] = graph[u][v];
        }
      }
    }

    cout << "Edge       Weight\n";
    for (int i = 1; i < V; i++)
      cout << parent[i] << " -> " << i << "       " << graph[i][parent[i]]
           << "\n";
  }
} g;

int main() {
  g.add_edge(0, 1, 4);
  g.add_edge(0, 2, 3);
  g.add_edge(1, 3, 2);
  g.add_edge(1, 2, 1);
  g.add_edge(2, 3, 4);
  g.add_edge(3, 4, 2);

  g.findMST();
  return 0;
}
#+end_src

#+RESULTS:
| Edge | Weight |   |   |
|    2 | ->     | 1 | 1 |
|    0 | ->     | 2 | 3 |
|    1 | ->     | 3 | 2 |
|    3 | ->     | 4 | 2 |

** Output
#+begin_example
$ ./l5p1
Edge       Weight
2 -> 1       1
0 -> 2       3
1 -> 3       2
3 -> 4       2
#+end_example

** Analysis
The algorithm runs in $O(V^2)$ time since we have to check for minimum weighted edge in every iteration, but it can be made more efficient by storing ordered edge weights.


* Kruskal's Algorithm
#+begin_src cpp :tangle l5p2.cpp
#include <bits/stdc++.h>
using namespace std;

#define V 5

class kruskal {
public:
  int graph[V][V], parent[V];

  kruskal() {
    for (int i = 0; i < V; i++) {
      for (int j = 0; j < V; j++) {
        graph[i][j] = INT_MAX;
      }
    }

    for (int i = 0; i < V; i++) {
      parent[i] = i;
    }
  }

  void add_edge(int i, int j, int wt) {
    graph[i][j] = wt;
    graph[j][i] = wt;
  }

  int find(int i) {
    while (parent[i] != i)
      i = parent[i];
    return i;
  }

  void Union(int i, int j) { parent[find(i)] = find(j); }

  void findMST() {
    cout << "Edge       Weight\n";

    for (int e = 0; e < V - 1; e++) {
      int min = INT_MAX, a = -1, b = -1;

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (find(i) != find(j) && graph[i][j] < min) {
            min = graph[i][j];
            a = i;
            b = j;
          }
        }
      }

      Union(a, b);
      cout << a << " -> " << b << "       " << min << "\n";
    }
  }
} g;

int main() {
  g.add_edge(0, 1, 4);
  g.add_edge(0, 2, 3);
  g.add_edge(1, 3, 2);
  g.add_edge(1, 2, 1);
  g.add_edge(2, 3, 4);
  g.add_edge(3, 4, 2);

  g.findMST();
}
#+end_src

#+RESULTS:
| Edge | Weight |   |   |
|    1 | ->     | 2 | 1 |
|    1 | ->     | 3 | 2 |
|    3 | ->     | 4 | 2 |
|    0 | ->     | 2 | 3 |

** Output
#+begin_example
$ ./l5p2
Edge       Weight
1 -> 2       1
1 -> 3       2
3 -> 4       2
0 -> 2       3
#+end_example

** Analysis
Kruskal's algorithm runs in $O(E log(E))$ or $O(E log(V))$ time, since we have union step in $O(log(E))$ time, and $E$ edges.
$E$ can be at most $V^2$ and $O(log(V^2))$ is $O(log(V))$.
